name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint
        run: flake8 src/

      - name: Test
        run: pytest -q

  build-and-push:
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build + push TRAIN image (extra tags in same repo)
      - name: Build & push train image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.train
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-train:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-train:sha-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-train:staging
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-train:run-${{ github.run_number }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-train:latest
          cache-to: type=inline

      # Build + push API image (extra tags in same repo)
      - name: Build & push api image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.api
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-api:sha-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-api:staging
            ${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-api:run-${{ github.run_number }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/mlops-ec2-api:latest
          cache-to: type=inline

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify files exist
        run: |
          set -e
          ls -l ./docker-compose.yml ./deploy.sh
          test -d ./monitoring

      # Pack the deploy bundle explicitly (robust)
      - name: Create deploy bundle
        run: |
          tar -czf deploy_bundle.tgz docker-compose.yml deploy.sh monitoring/

      - name: Upload bundle to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: ./deploy_bundle.tgz
          target: /home/ubuntu/mlops-app
          debug: true

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          command_timeout: 30m
          script: |
            set -euo pipefail
            cd /home/ubuntu/mlops-app

            # Unpack bundle
            tar -xzf deploy_bundle.tgz
            rm -f deploy_bundle.tgz

            # Compose variables
            export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
            export IMAGE_TAG='latest'  # change to 'staging' or 'run-${{ github.run_number }}' if you want

            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # Show resolved images
            docker compose config | sed -n 's/^[[:space:]]*image:[[:space:]]*//p'

            # Pre-clean if root FS has <3GB free
            FREE_MB=$(df -Pm / | awk 'NR==2{print $4}')
            if [ "$FREE_MB" -lt 3072 ]; then
              echo "Low disk (${FREE_MB} MB). Pruning Docker..."
              docker compose down || true
              docker system prune -af --volumes || true
              docker builder prune -af || true
              sudo find /var/lib/docker/containers -name '*-json.log' -exec sudo truncate -s 0 {} \; || true
            fi


            # Pull & restart
            docker compose pull
            docker compose up -d --remove-orphans

            # Cleanup and status
            docker image prune -f
            docker compose ps
