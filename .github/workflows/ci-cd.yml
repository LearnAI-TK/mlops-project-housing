name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_API: ${{ secrets.DOCKERHUB_USERNAME }}/mlops-project-api
  IMAGE_TRAIN: ${{ secrets.DOCKERHUB_USERNAME }}/mlops-project-train

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint
        run: flake8 src/

      - name: Test
        run: pytest -q

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------- API image --------
      - name: Docker meta (api)
        id: meta_api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_API }}
          tags: |
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push (api)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile              # API Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_api.outputs.tags }}
          labels: ${{ steps.meta_api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------- TRAIN image --------
      - name: Docker meta (train)
        id: meta_train
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_TRAIN }}
          tags: |
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push (train)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.train        # <- ensure this exists
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta_train.outputs.tags }}
          labels: ${{ steps.meta_train.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for compose + scripts)
        uses: actions/checkout@v4

      - name: Copy bundle to EC2 (docker-compose, monitoring, deploy.sh)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.yml
            deploy.sh
            monitoring/**
          target: ${{ secrets.REMOTE_DIR }}
          overwrite: true
          strip_components: 0

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd "${{ secrets.REMOTE_DIR }}"

            # Ensure mount dirs exist
            mkdir -p mlflow logs models data reports monitoring

            # Patch API port if still bound to 127.0.0.1 (make it public)
            if grep -q '127\.0\.0\.1:8000:8000' docker-compose.yml; then
              sed -i 's/127\.0\.0\.1:8000:8000/8000:8000/' docker-compose.yml
            fi

            # Remove obsolete top-level "version" if present (compose v2 warning)
            if head -n1 docker-compose.yml | grep -qi '^version:'; then
              tmpf=$(mktemp)
              awk 'BEGIN{skip=0} !/^version:/{print}' docker-compose.yml > "$tmpf" && mv "$tmpf" docker-compose.yml
            fi

            # Pull and up
            docker compose pull
            docker compose up -d --remove-orphans
            docker compose ps

      - name: Post-deploy healthcheck (API)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            url="http://localhost:8000/health"
            echo "Checking $url ..."
            # retry up to ~90s
            for i in $(seq 1 30); do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || true)
              if [ "$code" = "200" ]; then
                echo "API is healthy (200)."
                exit 0
              fi
              echo "Health not ready (code=$code). Retrying... ($i/30)"
              sleep 3
            done
            echo "API healthcheck failed."
            curl -s "$url" || true
            exit 1
