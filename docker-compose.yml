services:
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.18.0
    ports: [ "5000:5000" ]
    volumes:
      - ./mlflow:/mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: sqlite:////mlflow/mlflow.db
      # IMPORTANT: use file:/// (three slashes)
      MLFLOW_DEFAULT_ARTIFACT_ROOT: file:///mlflow/mlruns
    command: >
      bash -lc "
        mkdir -p /mlflow/mlruns &&
        touch /mlflow/mlflow.db &&
        chmod a+rw /mlflow/mlflow.db &&
        apt-get update -qq &&
        apt-get install -y -qq curl >/dev/null &&
        mlflow server --host 0.0.0.0 --port 5000
          --backend-store-uri sqlite:////mlflow/mlflow.db
          --default-artifact-root file:///mlflow/mlruns
      "
    healthcheck:
      test: [ "CMD-SHELL", "curl -sSf http://localhost:5000 >/dev/null || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  train:
    image: "${DOCKERHUB_USERNAME}/mlops-ec2-train:${IMAGE_TAG:-latest}"
    depends_on:
      mlflow:
        condition: service_healthy
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MODEL_NAME: CaliforniaHousingRegressor
      MODEL_ALIAS: staging
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ap-south-1
    volumes:
      - ./mlflow:/mlflow
      - ./data:/app/data
    command: bash -lc "dvc pull -q && python -u src/model_training.py"

  api:
    image: "${DOCKERHUB_USERNAME}/mlops-ec2-api:${IMAGE_TAG:-latest}"
    depends_on:
      mlflow:
        condition: service_healthy
    ports: [ "8000:8000" ]
    environment:
      MLFLOW_TRACKING_URI: "http://mlflow:5000"
      MODEL_NAME: "CaliforniaHousingRegressor"
      MODEL_ALIAS: "staging"
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app
    command: >
      uvicorn src.api:app --app-dir /app --host 0.0.0.0 --port 8000
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./mlflow:/mlflow
      - ./src:/app/src:ro
      - ./data:/app/data
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8000/health >/dev/null || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    command: [ "--config.file=/etc/prometheus/prometheus.yml" ]
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: [ "9090:9090" ]
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports: [ "3000:3000" ]
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
